}#
actual = mean(x, na.rm = TRUE)#
label = "mean"#
}#
#
if(est == "median"){#
randomization.dist = rep(NA, num)#
sampShifted = x - median(x, na.rm = TRUE) + null#
for(i in 1:num){#
samp <- sample(sampShifted, size = length(x), replace = TRUE)#
randomization.dist[i] = median(samp, na.rm = TRUE)#
}#
actual = median(x, na.rm = TRUE)#
label = "median"#
}#
#
if(est == "prop"){#
randomization.dist = rbinom(n = num, size = length(x), prob = null)/length(x)#
actual = sum(x == cat)/length(x)#
label = "proportion"#
}	#
#
# plot#
xmin = min(actual, min(randomization.dist))#
xmax = max(actual, max(randomization.dist))#
#
counts = hist(randomization.dist)$counts  #
hist(randomization.dist, main = "Randomization Distribution", xlab = "Simulated sample proportions", cex.lab = 0.9, xlim = c(xmin,xmax), ylim = c(0, 1.25*max(counts))) #
alternative <- match.arg(alternative)#
if(alternative == "less" || alternative == "greater"){#
lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
}#
if(alternative == "two.sided"){#
lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
}#
#
text(x = actual, y = 1.2*max(counts), paste("obs prop\n", round(actual,3), sep = " "), col = "red", cex = 0.8)#
#
# print observed#
cat(paste("Observed", label, ":", round(actual,3), "\n", sep=""))#
#
# smaller tail#
smaller.tail = round(min(c(mean(randomization.dist <= actual), mean(randomization.dist >= actual))),4)#
#
# p-value#
if(alternative == "less" & actual < null){#
cat(paste("p-value for a one sided test, less: ", smaller.tail,"\n"))	#
}#
if(alternative == "less" & actual > null){#
cat(paste("p-value for a one sided test, less: ", 1 - smaller.tail,"\n"))		#
}#
if(alternative == "greater" & actual > null){#
cat(paste("p-value for a one sided test, greater: ", smaller.tail,"\n"))		#
}#
if(alternative == "greater" & actual < null){#
cat(paste("p-value for a one sided test, greater: ", 1 - smaller.tail,"\n"))		#
}#
if(alternative == "two.sided"){#
cat(paste("p-value for a two sided test: ", smaller.tail*2,"\n"))#
}#
}
simHT(y, null = 0.5, cat = "b", alternative = "less")
simHT(y, null = 0.5, cat = "b", alternative = "greater")
simHT(y, null = 0.5, cat = "b")
tennACT = c(rep(36,16), rep(35,98), rep(34,227), rep(33,392), rep(32,585), rep(31,706), rep(30,951), rep(29,1239), rep(28,1396), rep(27,1693), rep(26,2089), rep(25,2488), rep(24,2999), rep(23,3395), rep(22,3982), rep(21,4575), rep(20,4339), rep(19,4935), rep(18,4934), rep(17,5052), rep(16,5092), rep(15,4913), rep(14,4667), rep(13,4005), rep(12,2630), rep(11,920), rep(10,166), rep(9,25), rep(8,7), rep(7,5), rep(6,2), rep(5,1), rep(4,0), rep(3,0), rep(2,0), rep(1,0))
simHT(tennACT, null=21.1, alternative = "less")
simHT <- function(x, est = c("mean", "median", "prop"), null, alternative = c("two.sided", "less", "greater"), num = 10000, cat = NA){#
# if character, make factor#
if(class(x) == "character"){#
x = as.factor(x)#
}#
#
# determine estimate#
if(length(est) == 3){#
if(class(x) == "factor"){est = "prop"}#
else{est = "mean"}#
}#
#
# make sure categories are given and proper#
if(est == "prop"){#
if(is.na(cat)){#
stop("Provide a category of the variable")#
}#
if(cat %in% levels(x) == FALSE){#
stop("Category provided is not one of the categories of the variable")#
}		#
}#
#
# point estimate and null and randomization distribution#
if(est == "mean"){#
randomization.dist = rep(NA, num)#
sampShifted = x - mean(x, na.rm = TRUE) + null#
for(i in 1:num){#
samp <- sample(sampShifted, size = length(x), replace = TRUE)#
randomization.dist[i] = mean(samp, na.rm = TRUE)#
}#
actual = mean(x, na.rm = TRUE)#
label = "mean"#
}#
#
if(est == "median"){#
randomization.dist = rep(NA, num)#
sampShifted = x - median(x, na.rm = TRUE) + null#
for(i in 1:num){#
samp <- sample(sampShifted, size = length(x), replace = TRUE)#
randomization.dist[i] = median(samp, na.rm = TRUE)#
}#
actual = median(x, na.rm = TRUE)#
label = "median"#
}#
#
if(est == "prop"){#
randomization.dist = rbinom(n = num, size = length(x), prob = null)/length(x)#
actual = sum(x == cat)/length(x)#
label = "proportion"#
}	#
#
# plot#
xmin = min(actual, min(randomization.dist))#
xmax = max(actual, max(randomization.dist))#
#
counts = hist(randomization.dist)$counts  #
hist(randomization.dist, main = "Randomization Distribution", xlab = "Simulated sample proportions", cex.lab = 0.9, xlim = c(xmin,xmax), ylim = c(0, 1.25*max(counts))) #
alternative <- match.arg(alternative)#
if(alternative == "less" || alternative == "greater"){#
lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
}#
if(alternative == "two.sided"){#
lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
}#
#
text(x = actual, y = 1.2*max(counts), paste("obs\n", round(actual,3), sep = " "), col = "red", cex = 0.8)#
#
# print observed#
cat(paste("Observed", label, ":", round(actual,3), "\n", sep=""))#
#
# smaller tail#
smaller.tail = round(min(c(mean(randomization.dist <= actual), mean(randomization.dist >= actual))),4)#
#
# p-value#
if(alternative == "less" & actual < null){#
cat(paste("p-value for a one sided test, less: ", smaller.tail,"\n"))	#
}#
if(alternative == "less" & actual > null){#
cat(paste("p-value for a one sided test, less: ", 1 - smaller.tail,"\n"))		#
}#
if(alternative == "greater" & actual > null){#
cat(paste("p-value for a one sided test, greater: ", smaller.tail,"\n"))		#
}#
if(alternative == "greater" & actual < null){#
cat(paste("p-value for a one sided test, greater: ", 1 - smaller.tail,"\n"))		#
}#
if(alternative == "two.sided"){#
cat(paste("p-value for a two sided test: ", smaller.tail*2,"\n"))#
}#
}
simHT(tennACT, null=21.1, alternative = "less")
(18+9)*(18+37+24)/(18+37+24+9+15+23)
(18+9)*(9+15+23)/(18+37+24+9+15+23)
10/.05
200*.1
200*.08
150*.08
150*.05
150*.95
150*.08
q()
source("http://www.openintro.org/stat/data/cdc.R")
head(cdc)
cdc$bmi = (cdc$weight / cdc$height^ 2) * 703
head(cdc)
freqRed295 <- c(5, 8, 4, 9, 10, 11, 6, 10, 8, 6, 11, 7, 6, 5, 12, 5, 7, 5,            7, 8, 11, 5, 14, 10, 8, 6, 11, 0, 10, 12, 9, 4, 7, 5, 1, 8, 10, 6, 8)       ball <- c(1:39)       barplot(freqRed295, names = ball)       exp <- 295 / 39       abline(h = exp, col = "red")       chisq.test(freqRed295)
cdc$w_status = NA#
cdc$w_status[cdc$bmi < 18.5] = "underweight"#
cdc$w_status[cdc$bmi >= 18.5 & cdc$bmi <= 24.9] = "normal"#
cdc$w_status[cdc$bmi > 24.9 & cdc$bmi <= 29.9] = "overweight"#
cdc$w_status[cdc$bmi > 29.9] = "obese"#
cdc$w_status = as.factor(cdc$w_status)
table(cdc$w_status)
sum(table(cdc$w_status))
d(cdc)
dim(cdc)
is.na(cdc$w_status)
sum(is.na(cdc$w_status))
sum(table(cdc$w_status))
table(cdc$w_status)
head(cdc)
table(cdc$genhlth)
table(cdc$genhlth, cdc$w_status)
chisq.test(table(cdc$genhlth, cdc$w_status))
chisq.test(table(cdc$genhlth, cdc$smoke100))
chisq.test(table(cdc$smoke100, cdc$w_status))
table(cdc$smoke100, cdc$w_status)
is.na(cdc$smoke100)
sum(os.na(cdc$smoke100))
sum(is.na(cdc$smoke100))
table(cdc$smoke100, cdc$w_status)
table(cdc$smoke100)
10559+9441
cdc$smoke100[cdc$smoke100 == 0] = "no"#
cdc$smoke100[cdc$smoke100 == 1 = "yes"
source("http://www.openintro.org/stat/data/cdc.R")#
#
cdc$bmi = (cdc$weight / cdc$height^ 2) * 703#
#
cdc$w_status = NA#
cdc$w_status[cdc$bmi < 18.5] = "underweight"#
cdc$w_status[cdc$bmi >= 18.5 & cdc$bmi <= 24.9] = "normal"#
cdc$w_status[cdc$bmi > 24.9 & cdc$bmi <= 29.9] = "overweight"#
cdc$w_status[cdc$bmi > 29.9] = "obese"#
cdc$w_status = as.factor(cdc$w_status)#
#
cdc$smoke100[cdc$smoke100 == 0] = "no"#
cdc$smoke100[cdc$smoke100 == 1] = "yes"
head(cdc)
cdc$smoke100[cdc$hlthplan == 0] = "no"#
cdc$smoke100[cdc$hlthplan == 1] = "yes"
table(cdc$hlthplan, cdc$w_status)
chisq.test(table(cdc$hlthplan, cdc$w_status))
library(xtable)
xtable(table(cdc$hlthplan, cdc$w_status))
?xtable
xtable(table(cdc$hlthplan, cdc$w_status), row.names = FALSE)
#
source("http://www.openintro.org/stat/data/cdc.R")#
#
cdc$bmi = (cdc$weight / cdc$height^ 2) * 703#
#
cdc$w_status = NA#
cdc$w_status[cdc$bmi < 18.5] = "underweight"#
cdc$w_status[cdc$bmi >= 18.5 & cdc$bmi <= 24.9] = "normal"#
cdc$w_status[cdc$bmi > 24.9 & cdc$bmi <= 29.9] = "overweight"#
cdc$w_status[cdc$bmi > 29.9] = "obese"#
cdc$w_status = as.factor(cdc$w_status)#
#
cdc$smoke100[cdc$smoke100 == 0] = "no"#
cdc$smoke100[cdc$smoke100 == 1] = "yes"#
cdc$smoke100 = as.factor(cdc$smoke100)#
#
cdc$hlthplan[cdc$hlthplan == 0] = "no"#
cdc$hlthplan[cdc$hlthplan == 1] = "yes"#
cdc$hlthplan = as.factor(cdc$hlthplan)
xtable(table(cdc$hlthplan, cdc$w_status))
chisq.test(table(cdc$hlthplan, cdc$w_status))
levels(cdc$w_status)
cdc$w_status = factor(d$w_status,levels(d$w_status)[c(4,1,3,2)])
source("http://www.openintro.org/stat/data/cdc.R")#
#
cdc$bmi = (cdc$weight / cdc$height^ 2) * 703#
#
cdc$w_status = NA#
cdc$w_status[cdc$bmi < 18.5] = "underweight"#
cdc$w_status[cdc$bmi >= 18.5 & cdc$bmi <= 24.9] = "normal"#
cdc$w_status[cdc$bmi > 24.9 & cdc$bmi <= 29.9] = "overweight"#
cdc$w_status[cdc$bmi > 29.9] = "obese"#
cdc$w_status = as.factor(cdc$w_status)#
cdc$w_status = factor(cdc$w_status,levels(cdc$w_status)[c(4,1,3,2)])#
#
#cdc$smoke100[cdc$smoke100 == 0] = "no"#
#cdc$smoke100[cdc$smoke100 == 1] = "yes"#
#cdc$smoke100 = as.factor(cdc$smoke100)#
#
cdc$hlthplan[cdc$hlthplan == 0] = "no"#
cdc$hlthplan[cdc$hlthplan == 1] = "yes"#
cdc$hlthplan = as.factor(cdc$hlthplan)#
cdc$hlthplan = factor(cdc$hlthplan,levels(cdc$hlthplan)[c(2,1)])
xtable(table(cdc$hlthplan, cdc$w_status))
66 + 1061 + 871 + 5265
length(cdc$hlthplan == "yes")
sum(cdc$hlthplan == "yes")
sum(cdc$hlthplan == "no")
table(cdc$w_status)
q()
(30.56-28.79)
sqrt(14.34^2/844+13.48^2/129)
1.77/1.2854
1-.9099
*2
.0901*2
900+300+100+50
29/5
2524*3972/20000
1.96^2*.5*.5/0.03^2
71+224
144+389
295/533
sqrt(.55*.45/144+.55*.45/389)
10+9+8+13+9
sqrt(.77*.23/100)
.77-1.5*.042
(.7-.77)/.042
(.7-.77)/sqrt(.77*.23/100)
10+9+8+15+8
1.77/1.2854
1-.9162
.0838*2
358+13+3139+919
2+1+3+2+2
2+1+2+1+3
1+2+2+2+2
10+9+9+14+8
1.96^2*.5*.5/0.03^2
3+69+71+1
30+128+224+7
69+128
71+224
144+359
144+389
33+197+295+8
.19/(7.74/sqrt(27))
2*pnorm(0.1275541, lower.tail = FALSE)
2*pnorm(0.13, lower.tail = FALSE)
q()
8+8.5+6.5+12.5+5
9+9+10+12.5+8
q()
?t.test
5+24+4+3
32+5+4+3
60/12
47/69
1-.68
44-15
31-7
24/69
69-24
45/69
35-14.5
5+21.5+4+4
load("/Users/mine/Downloads/alr31+Project+1+final.RData")
35-11.5
24+17
f??movies
??movies
4+29+4+4
2+3+1
35-6
4+29+4+4
41-2
5+32+4+5
46-1
10/6
4/9.5
4/2.5
4/3.5
q()
library(openintro)
data(cars)
cars
a = lm(mpgCity~price+driveTrain+passengers+weight)
a = lm(mpgCity~price+driveTrain+passengers+weight, data = cars)
summary(a)
a = lm(price~ mpgCity +driveTrain+passengers+weight, data = cars)
summary(a)
plot(cars)
q()
?diamonds
??diamonds
data(diamonds, package = ggplot2)
install.packages("ggplot2")     # which will run a bunch of gibberish code#
library(ggplot2)                          # which will actually load the package#
data(diamonds)                         # which will load the diamonds data set of 50,000 diamond prices #
# as well as other predictors
?diamonds
10.63 - 4.0341 * 2.72
?cats
??cats
data(cats)
library(MASS)
data(cats)
summary(lm(Hwt~Bwt, data = cats))
setwd("/Users/mine/Desktop/Teaching/Sta 101 - F11/Lectures/Lecture 20/8-1multiplereg/figures/books")#
library(xtable)#
library(DAAG)#
#
data(allbacks)
install.packages("DAAG")
data(allbacks)
data(allbacks)
library(DAAG)
data(allbacks)
COL <- c('#55000088','#225588')
COL <- c('#55000088','#225588')
m1 = lm(weight ~ volume, data = allbacks)#
summary(m1)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")#
abline(m1, lwd = 3, col = COL[1])#
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = "blue")#
text(x = 350, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = "blue")
setwd("/Users/mine/Desktop/Teaching/Sta 101 - F11/Lectures/Lecture 20/8-1multiplereg/figures/books")
pdf("weight_volume.pdf", height = 4.3, width = 5.5)#
#
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)#
#
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")#
abline(m1, lwd = 3, col = COL[1])#
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = "blue")#
text(x = 350, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = "blue")#
#
dev.off()
198-184
d = read.csv("/Users/mine/Dropbox/OI Labs/lab8/data/goog.csv", h = T)
plot(d)
4+3+4+3+3+4+3+2+3+3+3+4+3+3+3+3+3+4+3+4+4
q()
library(openintro)
data(COL)
library(xtable)
library(DAAG)
data(allbacks)
m1 = lm(weight ~ volume, data = allbacks)
library(DAAG)
install.packages(DAAG)
install.packages("DAAG")
library(DAAG)
data(allbacks)
m1 = lm(weight ~ volume, data = allbacks)
summary(m1)
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[1])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = "blue")
text(x = 350, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = "blue")
?text
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[1])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = COL[1], pos = 1)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[2])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = COL[1], pos = 1)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[3])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = COL[1], pos = 1)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[4])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = COL[1], pos = 1)
pdf("weight_volume.pdf", height = 4.3, width = 5.5)
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)")
abline(m1, lwd = 3, col = COL[4])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.25, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.25, col = COL[1], pos = 1)
dev.off()
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 8
ch[allbacks$cover == "pb"] = 7
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],"orange"), pch = c(8,7))
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 16
ch[allbacks$cover == "pb"] = 17
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
pdf("weight_volume_cover.pdf", height = 4.3, width = 5.5)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
ch[allbacks$cover == "hb"] = 16
ch[allbacks$cover == "pb"] = 17
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 16
ch[allbacks$cover == "pb"] = 17
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 19
ch[allbacks$cover == "pb"] = 15
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],"orange"), pch = c(8,7))
ch
rm(ch)
rm(color)
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 19
ch[allbacks$cover == "pb"] = 15
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],"orange"), pch = c(8,7))
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 19
ch[allbacks$cover == "pb"] = 15
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],"orange"), pch = c(8,7))
