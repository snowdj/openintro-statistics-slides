source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot$boys
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
source("http://www.openintro.org/stat/data/present.R")
View(present)
View(arbuthnot)
177/8
20*8
25*8
24*8
?highlight
??highlight
library("highlight", lib.loc="/Users/mine/Library/R/2.15/library")
install.packages(c("caTools", "countrycode", "Deducer", "digest", "effects", "evaluate", "foreign", "formatR", "ggplot2", "gtable", "HH", "HistData", "knitr", "mapproj", "maps", "maptools", "meta", "mvtnorm", "nlme", "PBSmapping", "plyr", "proto", "R.oo", "Rcpp", "ReadImages", "reshape2", "rjson", "rpart", "scales", "sp", "spdep", "stringr", "survival"))
install.packages(c("digest", "evaluate", "foreign", "maptools", "Matrix", "nlme", "plyr", "rgdal", "rgeos", "rpart", "sp", "stringr", "survival"), lib="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
install.packages(c("caTools", "countrycode", "Deducer", "digest",
install.packages(c("caTools", "countrycode", "Deducer", "digest", "effects", "evaluate", "foreign", "formatR", "ggplot2", "gtable", "HH", "HistData", "knitr", "mapproj", "maps", "maptools", "meta", "mvtnorm", "nlme", "PBSmapping", "plyr", "proto", "R.oo", "Rcpp", "ReadImages", "reshape2", "rjson", "rpart", "scales", "sp", "spdep", "stringr", "survival"))
install.packages(c("digest", "evaluate", "foreign", "maptools", "Matrix", "nlme", "plyr", "rgdal", "rgeos", "rpart", "sp", "stringr", "survival"), lib="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("parser", lib.loc="/Users/mine/Library/R/2.15/library")
library("parser")
library("highlight", lib.loc="/Users/mine/Library/R/2.15/library")
library(parser)
require(parser)
library("formatR", lib.loc="/Users/mine/Library/R/2.15/library")
library("knitr", lib.loc="/Users/mine/Library/R/2.15/library")
install.packages("highlight",repos="http://r-forge.r-project.org", type="source")
install.packages("highlight", repos = "http://r-forge.r-project.org",
type="source")
install.packages("highlight",repos="http://r-forge.r-project.org", type="source")
install.packages("highlight", repos = "http://r-forge.r-project.org",
)
install.packages("highlight", repos = "http://r-forge.r-project.org",
library(devtools)
install_github('formatR', 'yihui')
install.packages("devtools")
library(devtools)
install_github('formatR', 'yihui')
install.packages(c("digest", "evaluate", "formatR", "highlight", "knitr",
"parser", "plyr", "Rcpp", "stringr"))
install.packages(c("digest", "evaluate", "formatR", "highlight",
library(parser)
library(c("digest", "evaluate", "formatR", "highlight", "knitr", "parser", "plyr", "Rcpp", "stringr"))
download.file("http://stat.duke.edu/courses/Spring13/sta101.001/labs/lab0.Rmd", destfile = "lab0.Rmd")
source("http://www.openintro.org/stat/data/arbuthnot.R")
View(arbuthnot)
setwd("~/")
download.file("/shared/cetinkaya.mine@gmail.com/lab0.Rmd", destfile = "lab0.Rmd")
?download.file
1 - 0.1^5
1 - 0.9^5
0.9^5
dbinom(1,5,.1)
dbinom(2,10,.1)
dbinom(3,20,.1)
dbinom(3,15,.1)
dbinom(3,20,.1)
dbinom(4,20,.1)
.33*.5/(.33*.5+.41*.5)
q()
setwd("~/Desktop/Teaching/Sta 101 - S13/Readiness Assessment/Unit 1/figures")#
#
set.seed(313)#
#
d1 = c(rnorm(50, 3), rnorm(50, 4))#
d2 = c(rnorm(50, 0, 4), rnorm(50, 0, 4))#
d = c(d1,d2)#
g = c(rep("A", 100), rep("B", 100))#
g = factor(g, levels = c("B","A"))#
#
pdf("boxplot.pdf", height = 1.5, width = 5)#
par(mar = c(2.5,2.5,0,0.5))#
boxplot(d ~ g, horizontal = TRUE, las = 1)#
dev.off()
q()
1-.95^50
.923-.0051
.923+.0051
1-.05^50
1-.05^30
1-.05^20
1-.05^15
1-.15^35
1-.15^25
1-.15^15
1-.15^10
1-.35^10
1-.35^20
1-.85^30
dbinom(1,30,.15)
dbinom(1,30,.85)
1-.85^15
1-.15^30
1-.15^29
150*.05
150*.95
500*.015
500*(1-0.015)
1-0.015
1-.85^15
1-.85^30
q()
factorial(5)
q()
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")#
load("ames.RData")
ls()
q()
fact=NULL#
# horiz=FALSE#
# width=2/3#
# lwd=1#
# lcol='black'#
# medianLwd=2#
# pch=20#
# pchCex=1.8#
# col=rgb(0,0,0,0.25)#
# add=FALSE#
# key=NULL#
# axes=TRUE#
# xlab=''#
# ylab=''#
# xlim=NULL#
# ylim=NULL#
# na.rm=TRUE#
#
`boxPlot` <-#
function(x, fact=NULL, horiz=FALSE, width=2/3, lwd=1, lcol='black', medianLwd=2, pch=20, pchCex=1.8, col=rgb(0,0,0,0.25), add=FALSE, key=NULL, axes=TRUE, xlab='', ylab='', xlim=NULL, ylim=NULL, na.rm=TRUE, ...){#
  if(!is.null(fact)[1]){#
  	if(na.rm){#
  	  keep <- !is.na(x) & !is.na(fact)#
  	  fact <- fact[keep]#
  	  x    <- x[keep]#
  	}#
  	if(is.null(key)[1]){#
  	  if(is.factor(fact)[1]){#
  	    uFact <- levels(fact)#
  	  } else {#
  	    uFact <- sort(unique(fact))#
  	  }#
  	  key   <- uFact#
  	} else {#
  	  uFact <- key#
  	}#
  	N    <- length(uFact)#
  	fact <- as.character(fact)#
  	makePlot <- FALSE#
  	if(is.logical(add) && add == FALSE){#
  	  add  <- 1:length(uFact)#
  	  makePlot <- TRUE#
  	}#
  	if(is.null(xlim)[1]){#
  	  xlim <- c(1-width,N+width)#
  	  if(horiz){#
  	    xlim <- range(x)#
  	  }#
  	}#
  	if(is.null(ylim)[1]){#
  	  ylim <- range(x)#
  	  if(horiz){#
  	    ylim <- c(1-width,N+width)#
  	  }#
  	}#
    if(makePlot){#
      plot(0, 0, type="n", xlab=xlab, ylab=ylab,#
           xlim=xlim, ylim=ylim, axes=FALSE)#
      if(axes){#
        axis(ifelse(horiz, 2, 1), at=add, labels=uFact)#
  	    axis(ifelse(horiz, 1, 2))#
      }#
    }#
  	if(N > 1){#
  	  for(i in 1:N){#
  	    Recall(x[fact == uFact[i]], fact=NULL, horiz=horiz, width=width,#
  	        lwd=lwd, lcol=lcol, medianLwd=medianLwd, pch=pch,#
  	        pchCex=pchCex, col=col, add=add[i], na.rm=FALSE, ...)#
  	  }#
  	}#
  } else {#
  	if(na.rm){#
  	  keep <- !is.na(x)#
  	  x    <- x[keep]#
  	}#
  	if(is.logical(add) && add == FALSE){#
  	  add <- 1#
  	  if(is.null(xlim)[1]){#
  	    xlim <- c(add-width,add+width)#
  	    if(horiz){#
  	      xlim <- range(x)#
  	    }#
  	  }#
  	  if(is.null(ylim)[1]){#
  	    ylim <- range(x)#
  	    if(horiz){#
  	      ylim <- c(1-width,N+width)#
  	    }#
      }#
      plot(0, 0, type="n", xlab=xlab, ylab=ylab,#
           xlim=xlim, ylim=ylim, axes=FALSE)#
      if(axes){#
  	    axis(ifelse(horiz, 1, 2))#
      }#
  	}#
  	FN    <- c(min(x), quantile(x, c(0.25, 0.5, 0.75)), max(x))#
  	IQR   <- FN[4] - FN[2]#
  	FENCE <- FN[c(2,4)] + 1.5*IQR*c(-1,1)#
  	below <- x < FENCE[1]#
  	above <- x > FENCE[2]#
  	if(!any(below)){#
  	  FENCE[1] <- FN[1]#
  	} else {#
  	  FENCE[1] <- min(x[!below])#
  	}#
  	if(!any(above)){#
  	  FENCE[2] <- FN[5]#
  	} else {#
  	  FENCE[2] <- max(x[!above])#
  	}#
  	show  <- below | above#
  	w     <- width/2#
  	if(horiz){#
  	  rect(FN[2], add-w, FN[4], add+w, lwd=lwd, border=lcol)#
  	  lines(rep(FN[3], 2), add+w*c(-1,1), lwd=medianLwd, col=lcol)#
  	  lines(c(FENCE[1], FN[2]), rep(add,2), lwd=lwd, col=lcol)#
  	  lines(rep(FENCE[1], 2), add+w*c(-1,1), lwd=lwd, col=lcol)#
  	  lines(c(FENCE[2], FN[4]), rep(add,2), lwd=lwd, col=lcol)#
  	  lines(rep(FENCE[2], 2), add+w*c(-1,1), lwd=lwd, col=lcol)#
  	  if(any(show)){#
  	    points(x[show], rep(add, sum(show)),#
  	           pch=pch, cex=pchCex, col=col)#
  	  }#
  	} else {#
  	  rect(add-w, FN[2], add+w, FN[4], lwd=lwd, border=lcol)#
  	  lines(add+w*c(-1,1), rep(FN[3], 2), lwd=medianLwd, col=lcol)#
  	  lines(rep(add,2), c(FENCE[1], FN[2]), lwd=lwd, col=lcol)#
  	  lines(add+w*c(-1,1), rep(FENCE[1], 2), lwd=lwd, col=lcol)#
  	  lines(rep(add,2), c(FENCE[2], FN[4]), lwd=lwd, col=lcol)#
  	  lines(add+w*c(-1,1), rep(FENCE[2], 2), lwd=lwd, col=lcol)#
  	  if(any(show)){#
  	    points(rep(add, sum(show)), x[show],#
  	           pch=pch, cex=pchCex, col=col)#
  	  }#
  	}#
  }#
}
library(openintro)#
data(COL)
setwd("~/Desktop/Open Intro/OI Slides/Chp 1/1-6_numerical_data/figures/study_hours")
d = read.csv("study_hours.csv")
study_hours = d$study_hours[!is.na(d$study_hours)]
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week")
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 30, 1.40, 30, length=0.08)#
text(2,30,'upper whisker', pos=4)#
#
arrows(2, q+1.5*IQR(study_hours)-0.65, 1.40, q+1.5*IQR(study_hours)-0.65, length=0.08)#
lines(c(0.72,1.28), rep(q+1.5*IQR(study_hours)-0.65,2), lty=3, col='#00000066')#
text(2,q+1.5*IQR(study_hours)-0.65,'max whisker reach', pos=4)#
#
arrows(2, 37.5, 1.40, 40, length=0.08)#
arrows(2, 37.5, 1.40, 35, length=0.08)#
text(2,37.5,'suspected outliers', pos=4)#
#
points(rep(0.4, 99), rev(sort(study_hours))[1:99], cex=rep(1.5, 27), col=rep(COL[1,3], 99), pch=rep(20, 99))#
points(rep(0.4, 99), sort(study_hours)[1:99], cex=rep(1, 27), col=rep(COL[2], 99), pch=rep(1, 99))
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)
summary(study_hours)
20+1.5*10
study_hours
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 30, 1.40, 30, length=0.08)#
text(2,25,'max whisker reach & upper whisker', pos=4)
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,25,'max whisker reach & upper whisker', pos=4)
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach & upper whisker', pos=4)
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach \\& upper whisker', pos=4)
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach\n& upper whisker', pos=4)
studyHours
study_hours
order(study_hours)
sort(study_hours)
mean(c(45,49))
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach\n& upper whisker', pos=4)#
#
arrows(2, 47, 1.40, 45, length=0.08)#
arrows(2, 47, 1.40, 49, length=0.08)#
text(2,37.5,'suspected outliers', pos=4)
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach\n& upper whisker', pos=4)#
#
arrows(2, 47, 1.40, 45, length=0.08)#
arrows(2, 47, 1.40, 49, length=0.08)#
text(2,47,'suspected outliers', pos=4)
points(rep(0.4, 99), rev(sort(study_hours))[1:99], cex=rep(1.5, 27), col=rep(COL[1,3], 99), pch=rep(20, 99))
points(rep(0.4, 99), sort(study_hours)[1:99], cex=rep(1, 27), col=rep(COL[2], 99), pch=rep(1, 99))
library(openintro)#
data(COL)#
#
d = read.csv("study_hours.csv")#
#
study_hours = d$study_hours[!is.na(d$study_hours)]#
#
# box#
#
myPDF('study_hours_box.pdf', 6, 4, mar=c(0.5,4,0,1), cex.axis = 1.5, cex.lab = 1.25)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week")#
#
dev.off()#
#
# layout#
#
myPDF("study_hours_box_layout.pdf", 6, 4)#
par(mar=c(0.8,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
#
boxPlot(study_hours, col = COL[1,3], ylab = "# of study hours / week", axes=FALSE, xlim = c(0,3.5), pch = 20)#
axis(2)#
#
arrows(2,0, 1.40,min(study_hours)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.40, quantile(study_hours, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(study_hours)#
arrows(2, m, 1.40, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(study_hours, 0.75)#
arrows(2, q, 1.40, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 35, 1.40, 35, length=0.08)#
text(2,35,'max whisker reach\n& upper whisker', pos=4)#
#
arrows(2, 47, 1.40, 45, length=0.08)#
arrows(2, 47, 1.40, 49, length=0.08)#
text(2,47,'suspected outliers', pos=4)#
#
points(rep(0.4, 99), rev(sort(study_hours))[1:99], cex=rep(1.5, 27), col=rep(COL[1,3], 99), pch=rep(20, 99))#
points(rep(0.4, 99), sort(study_hours)[1:99], cex=rep(1, 27), col=rep(COL[2], 99), pch=rep(1, 99))#
#
dev.off()
treeDiag <- function(main, p1, p2, out1=c('Yes','No'), out2=c('Yes','No'), textwd=0.15, solwd=0.2, SBS=c(TRUE,TRUE), showSol=TRUE, solSub=NULL, digits=4, textadj=0.015, cex.main=1.3, col.main="#999999", showWork=FALSE){#
	#=====> Checks <=====##
	SBS <- rep(SBS, 2)#
	if(length(p1) != length(out1)){#
		stop("p1 and out1 must have the same length")#
	}#
	P1 <- format(p1)#
	P2 <- list()#
	for(i in 1:length(p1)){#
		P2[[i]] <- format(p2[[i]])#
		if(length(p2[[i]]) != length(out2)){#
			stop("Each list item of p2 must have the same length as out2")#
		}#
	}#
	#=====> Prepare Formatting <=====##
	x <- (0.75-2*textwd)/2#
	x <- c(0, x, x+textwd, 2*x+textwd, 2*x+2*textwd+0.05)#
	y1 <- c(.4, -.4)#
	y2 <- c(.21, -.21)#
	n1 <- length(p1)#
	n2 <- length(p2[[1]])#
	if(n1 == 2 && n2 > 2){#
		y2 <- seq(.23, -.23, len=n2)#
	} else if(n1 > 2 && n2 == 2){#
		y1 <- seq(.5, -.5, len=n1)#
		y2 <- seq(.13, -.13, len=n2)#
	} else if(n1 > 2 && n2 > 2){#
		y1 <- seq(.5, -.5, len=n1)#
		y2 <- seq(.1, -.1, len=n2)#
	}#
	#=====> Basic Plot <=====##
	par(mar=c(0,0,0,0))#
	plot(1,1,type='n', axes=FALSE, ylim=c(-.76,1.03), xlim=c(0,0.8+solwd), xlab='', ylab='')#
	text(mean(x[2:3]), 0.95, main[1], cex=cex.main, col=col.main)#
	text(mean(x[4:5]), 0.95, main[2], cex=cex.main, col=col.main)#
	#=====> Branches <=====##
	for(i in 1:n1){#
		lines(x[1:2], c(0,y1[i]))#
		lines(x[2:3], c(y1[i],y1[i]), lty=2)#
		if(SBS[1]){#
			temp <- paste(out1[i], P1[i], sep=",  ")#
			text(mean(x[2:3]), y1[i]-textadj, temp, pos=3)#
		} else {#
			text(mean(x[2:3]), y1[i], P1[i]+textadj, pos=1)#
			text(mean(x[2:3]), y1[i], out1[i]-textadj, pos=3)#
		}#
		for(j in 1:n2){#
			lines(x[3:4], y1[i]+c(0, y2[j]))#
			lines(x[4:5], y1[i]+c(y2[j], y2[j]), lty=2)#
			if(SBS[2]){#
				temp <- paste(out2[j], P2[[i]][j], sep=",  ")#
				text(mean(x[4:5]), y1[i]+y2[j]-textadj, temp, pos=3)#
			} else {#
				text(mean(x[4:5]), y1[i]+y2[j], P2[[i]][j], pos=1)#
				text(mean(x[4:5]), y1[i]+y2[j], out2[j], pos=3)#
			}#
			if(showSol){#
				sol <- format(round(p1[i]*p2[[i]][j], digits),#
								scientific=FALSE)#
				if(showWork){#
					temp <- paste(p1[i], p2[[i]][j], sep="*")#
					sol  <- paste(temp, sol, sep=" = ")#
				}#
				if(!is.null(solSub)[1]){#
					sol  <- solSub[[i]][j]#
				}#
				text(x[5], y1[i]+y2[j], sol, pos=4)#
			}#
		}#
	}#
}
setwd("~/Desktop/Open Intro/OI Slides/Chp 2/2-2_conditional_probability/figures/cancer_tree")
library(openintro)#
myPDF('cancer_tree_first.pdf', 7, 3.75, mar=c(0,0,0,0))#
#
treeDiag(c('Cancer status', 'Test result'), out1 = c("cancer","no cancer"), out2 = c("positive","negative"), c(0.017, 0.983), list(c(0.78, 0.22), c(0.1, 0.9)), showWork = TRUE, solwd=0.23)#
#
dev.off()#
myPDF('cancer_tree_second.pdf', 7, 3.75, mar=c(0,0,0,0))#
#
treeDiag(c('Cancer status', 'Test result'), out1 = c("cancer","no cancer"), out2 = c("positive","negative"), c(0.12, 0.88), list(c(0.78, 0.22), c(0.1, 0.9)), showWork = TRUE, solwd=0.23)#
#
dev.off()
treeDiag <- function(main, p1, p2, out1=c('Yes','No'), out2=c('Yes','No'), textwd=0.15, solwd=0.2, SBS=c(TRUE,TRUE), showSol=TRUE, solSub=NULL, digits=4, textadj=0.015, cex.main=1.3, col.main="#999999", showWork=FALSE){#
	#=====> Checks <=====##
	SBS <- rep(SBS, 2)#
	if(length(p1) != length(out1)){#
		stop("p1 and out1 must have the same length")#
	}#
	P1 <- format(p1)#
	P2 <- list()#
	for(i in 1:length(p1)){#
		P2[[i]] <- format(p2[[i]])#
		if(length(p2[[i]]) != length(out2)){#
			stop("Each list item of p2 must have the same length as out2")#
		}#
	}#
	#=====> Prepare Formatting <=====##
	x <- (0.75-2*textwd)/2#
	x <- c(0, x, x+textwd, 2*x+textwd, 2*x+2*textwd+0.05)#
	y1 <- c(.4, -.4)#
	y2 <- c(.21, -.21)#
	n1 <- length(p1)#
	n2 <- length(p2[[1]])#
	if(n1 == 2 && n2 > 2){#
		y2 <- seq(.23, -.23, len=n2)#
	} else if(n1 > 2 && n2 == 2){#
		y1 <- seq(.5, -.5, len=n1)#
		y2 <- seq(.13, -.13, len=n2)#
	} else if(n1 > 2 && n2 > 2){#
		y1 <- seq(.5, -.5, len=n1)#
		y2 <- seq(.1, -.1, len=n2)#
	}#
	#=====> Basic Plot <=====##
	par(mar=c(0,0,0,0))#
	plot(1,1,type='n', axes=FALSE, ylim=c(-.76,1.03), xlim=c(0,0.8+solwd), xlab='', ylab='')#
	text(mean(x[2:3]), 0.95, main[1], cex=cex.main, col=col.main)#
	text(mean(x[4:5]), 0.95, main[2], cex=cex.main, col=col.main)#
	#=====> Branches <=====##
	for(i in 1:n1){#
		lines(x[1:2], c(0,y1[i]))#
		lines(x[2:3], c(y1[i],y1[i]), lty=2)#
		if(SBS[1]){#
			temp <- paste(out1[i], P1[i], sep=",  ")#
			text(mean(x[2:3]), y1[i]-textadj, temp, pos=3)#
		} else {#
			text(mean(x[2:3]), y1[i], P1[i]+textadj, pos=1)#
			text(mean(x[2:3]), y1[i], out1[i]-textadj, pos=3)#
		}#
		for(j in 1:n2){#
			lines(x[3:4], y1[i]+c(0, y2[j]))#
			lines(x[4:5], y1[i]+c(y2[j], y2[j]), lty=2)#
			if(SBS[2]){#
				temp <- paste(out2[j], P2[[i]][j], sep=",  ")#
				text(mean(x[4:5]), y1[i]+y2[j]-textadj, temp, pos=3)#
			} else {#
				text(mean(x[4:5]), y1[i]+y2[j], P2[[i]][j], pos=1)#
				text(mean(x[4:5]), y1[i]+y2[j], out2[j], pos=3)#
			}#
			if(showSol){#
				sol <- format(round(p1[i]*p2[[i]][j], digits),#
								scientific=FALSE)#
				if(showWork){#
					temp <- paste(p1[i], p2[[i]][j], sep="*")#
					sol  <- paste(temp, sol, sep=" = ")#
				}#
				if(!is.null(solSub)[1]){#
					sol  <- solSub[[i]][j]#
				}#
				text(x[5], y1[i]+y2[j], sol, pos=4)#
			}#
		}#
	}#
}
myPDF('cancer_tree_first.pdf', 7, 3.75, mar=c(0,0,0,0))#
#
treeDiag(c('Cancer status', 'Test result'), out1 = c("cancer","no cancer"), out2 = c("positive","negative"), c(0.017, 0.983), list(c(0.78, 0.22), c(0.1, 0.9)), showWork = TRUE, solwd=0.23)#
#
dev.off()#
myPDF('cancer_tree_second.pdf', 7, 3.75, mar=c(0,0,0,0))#
#
treeDiag(c('Cancer status', 'Test result'), out1 = c("cancer","no cancer"), out2 = c("positive","negative"), c(0.12, 0.88), list(c(0.78, 0.22), c(0.1, 0.9)), showWork = TRUE, solwd=0.23)#
#
dev.off()
setwd("~/Desktop/Open Intro/OI Slides/Chp 2/2-2_conditional_probability/figures/sir_tree")
myPDF('sir_tree.pdf', 7, 4, mar=c(0,0,0,0))#
#
treeDiag(c('Group', 'Test result'), #
	out1 = c("susceptible","infected","recovered"), #
	out2 = c("positive","negative"), #
	c(0.6, 0.1, 0.3), #
	list(c(0.05, 0.95), c(0.99, 0.01), c(0.35,0.65)),#
	textwd=0.20,solwd = 0.05)#
#
dev.off()
load("/Users/mine/Dropbox/Third Edition/01/figures/eoce/avandia/results.rda")
q()
